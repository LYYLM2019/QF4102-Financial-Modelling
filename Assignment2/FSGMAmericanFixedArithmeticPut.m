function optValue = FSGMAmericanFixedArithmeticPut(t, T, S0, sigma, q, runningAvg, r, K, rho, N)  %% Meaning of the parameters of this function % t: time left to maturity measured in years % T: the total time to maturity from initiation % S0: the current underlier price % sigma: the underlier's volatility % q: the underlier's dividend yield % runningAvg: The current running average % r: the market's risk free rate % K: the fixed strike price for this option % rho: the FSGM parameter % N: the number of time periods in lattice  %% Initial set up of parameters  dt = t/N; m = 1/rho; % the reciprocal of paramter rho dx = sigma * sqrt(dt); dy = rho * dx; u = exp(dx); d = exp(-dx); p = (exp((r-q)*dt) - d) / (u-d);  elapsedTime = T - t; elapsedPeriods = elapsedTime / dt; currentPeriods = elapsedPeriods + 1; runningAvg = (runningAvg * elapsedPeriods + S0) / currentPeriods;  Average = zeros(2*N*m+1);  jshift = 1; kshift = N*m + 1;  for k = (-N*m):1:(N*m)    Average(k + kshift) = runningAvg * exp(k*dy); end  %% Initialization V = zeros(N+1, 2*N*m+1); for j = 0:1:N    for k = (-N*m):1:(N*m)        V(j+jshift, k+kshift) = (K - Average(k+kshift));    end end  %% Algorithm: looping for n = (N-1):-1:0    for j = 0:1:n        for k = (-n*m):1:(n*m)                    % Set ups for this round            S = S0 * exp((2 * j - n) * dx);            nl = n + elapsedPeriods;            A = Average(k+kshift);                        Aup = (S * u + (nl + 1) * A) / (nl + 2);            kfloor = floor(round(log(Aup / S0) / dy, 4));                        kfloor_index = max(kfloor + (n+1)*m + 1,1);                        Vup_floor = V(j+1+jshift, kfloor_index);            Vup_floor_p1 = V(j+1+jshift, kfloor_index + 1);            Vup = LinearInterpolate(Aup, Average(kfloor_index), Average(kfloor_index + 1), Vup_floor, Vup_floor_p1);                        Adown = (S * d + (n + 1) * A) / (n + 2);            kfloor = floor(round(log(Adown / S0) / dy, 4));                        kfloor_index = max(kfloor + (n+1)*m + 1,1);                        Vdown_floor = V(j+jshift, kfloor_index);            Vdown_floor_p1 = V(j+jshift, kfloor_index + 1);            Vdown = LinearInterpolate(Adown, Average(kfloor_index), Average(kfloor_index + 1), Vdown_floor, Vdown_floor_p1);                        V(j+jshift, k+kshift) = max(exp(-r * dt) * (p * Vup + (1 - p) * Vdown), (K-A));                                end    end end  optValue = max(V(0+jshift, 0+kshift), (K-runningAvg)); endfunction sol = LinearInterpolate(x, x0, x1, f0, f1)  sol = (x - x1) / (x0 - x1) * f0 + (x - x0) / (x1 - x0) * f1;end